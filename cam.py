from ultralytics import YOLO
import cv2
from urllib.request import urlopen
import numpy as np
import time
import serial
import threading

# Kh·ªüi t·∫°o m√¥ h√¨nh YOLO
model = YOLO("best.pt")
url = 'http://192.168.100.39/cam-hi.jpg'
FRUIT_CLASSES = {0: "car", 1: "toys"}

# K·∫øt n·ªëi Arduino
try:
    arduino = serial.Serial(port="COM3", baudrate=115200, timeout=1)
    time.sleep(2)
    print("Connected to Arduino")
except Exception as e:
    print(f"Arduino connection error: {e}")
    arduino = None

# H√†m l·∫•y ·∫£nh t·ª´ ESP32-CAM
def get_frame_from_esp():
    try:
        img_resp = urlopen(url, timeout=2)
        imgnp = np.asarray(bytearray(img_resp.read()), dtype=np.uint8)
        return cv2.imdecode(imgnp, -1)
    except Exception as e:
        print(f"Camera error: {e}")
        return None

# H√†m x·ª≠ l√Ω y√™u c·∫ßu t·ª´ Arduino
def handle_arduino_request():
    while True:
        if arduino and arduino.in_waiting > 0:
            try:
                message = arduino.readline().decode().strip()
                if message == "CHECK":
                    print("\nüîé Received CHECK request")
                    
                    # Ch·ª•p ·∫£nh v√† nh·∫≠n di·ªán
                    frame = get_frame_from_esp()
                    
                    if frame is not None:
                        results = model(frame, conf=0.3)  # Gi·∫£m conf threshold xu·ªëng 0.3
                        result_class = "toys"  # M·∫∑c ƒë·ªãnh n·∫øu kh√¥ng ph√°t hi·ªán v·∫≠t th·ªÉ n√†o

                        print("Raw YOLO results:")
                        for result in results:
                            print(f"Detected boxes: {result.boxes}")  # Debug YOLO output

                        # V·∫Ω bounding box v√† ph√¢n t√≠ch k·∫øt qu·∫£
                        for result in results:
                            if len(result.boxes) > 0:  # Ki·ªÉm tra c√≥ v·∫≠t th·ªÉ kh√¥ng
                                for box in result.boxes:
                                    x1, y1, x2, y2 = map(int, box.xyxy[0])  # L·∫•y t·ªça ƒë·ªô h·ªôp
                                    class_id = int(box.cls[0])
                                    label = FRUIT_CLASSES.get(class_id, "Unknown")

                                    # V·∫Ω khung nh·∫≠n di·ªán
                                    cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                                    cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 
                                                0.5, (0, 255, 0), 2)

                                    print(f"Detected class_id: {class_id} -> {label}")  # Debug nh·∫≠n di·ªán
                                    result_class = label
                                    break

                        # G·ª≠i k·∫øt qu·∫£ v·ªÅ Arduino
                        response = f"{result_class}\n"
                        arduino.write(response.encode())
                        print(f"Sent to Arduino: {result_class}")

                        # L∆∞u ·∫£nh ƒë·ªÉ ki·ªÉm tra (n·∫øu c·∫ßn)
                        cv2.imwrite("captured_image.jpg", frame)

                    else:
                        print("Failed to capture image")
                        arduino.write("toys\n".encode())
            except Exception as e:
                print(f"Serial error: {e}")

# Kh·ªüi ch·∫°y lu·ªìng x·ª≠ l√Ω Serial
serial_thread = threading.Thread(target=handle_arduino_request)
serial_thread.daemon = True
serial_thread.start()

# Ch·∫°y v√≤ng l·∫∑p ch√≠nh (Hi·ªÉn th·ªã Camera)
print("System Ready")
while True:
    frame = get_frame_from_esp()
    
    if frame is not None:
        # Ch·∫°y YOLO tr√™n h√¨nh ·∫£nh ƒë·ªÉ hi·ªÉn th·ªã bounding box
        results = model(frame, conf=0.3)

        for result in results:
            if len(result.boxes) > 0:
                for box in result.boxes:
                    x1, y1, x2, y2 = map(int, box.xyxy[0])  # L·∫•y t·ªça ƒë·ªô h·ªôp
                    class_id = int(box.cls[0])
                    label = FRUIT_CLASSES.get(class_id, "Unknown")

                    # V·∫Ω khung nh·∫≠n di·ªán
                    cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                    cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 
                                0.5, (0, 255, 0), 2)

                    print(f"Detected class_id: {class_id} -> {label}")  # Debug nh·∫≠n di·ªán

        cv2.imshow("ESP32-CAM Stream", frame)  # Hi·ªÉn th·ªã h√¨nh ·∫£nh c√≥ nh·∫≠n di·ªán
    
    if cv2.waitKey(1) & 0xFF == ord('q'):  # Nh·∫•n 'q' ƒë·ªÉ tho√°t
        break

cv2.destroyAllWindows()  # ƒê√≥ng c·ª≠a s·ªï khi tho√°t
